# Complete Docker Compose with Frontend, Backend, and Monitoring
version: '3.8'

services:
  # Library Management Application
  library-app:
    build: .
    container_name: library-app
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=LibraryManagementSecretKey20241234567890
      - SPRING_H2_CONSOLE_ENABLED=true
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - MANAGEMENT_TRACING_SAMPLING_PROBABILITY=1.0
    volumes:
      - ./logs:/app/logs
      - ./frontend:/app/frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - library-network
    depends_on:
      - prometheus
      - zipkin

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: library-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - library-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: library-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - library-network
    depends_on:
      - prometheus

  # Zipkin for Distributed Tracing
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: library-zipkin
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    restart: unless-stopped
    networks:
      - library-network

  # Nginx for Frontend Serving (Optional)
  nginx:
    image: nginx:alpine
    container_name: library-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - library-network
    depends_on:
      - library-app

networks:
  library-network:
    driver: bridge
    name: library-network

volumes:
  grafana-storage:
  prometheus-data:
